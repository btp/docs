<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "urn:pubid:dita4publishers.org:doctypes:dita:topic" "urn:pubid:dita4publishers.org:doctypes:dita:topic">
<topic
  id="topic-id">
  <title>DITA Link Management API</title>
  <shortdesc>The DITA link management API provides a set of facilities for working with and managing
    links within DITA documents, in particular keys and key references. The API is intended to be
    useful and usable by a variety of different tools types: editors, content management systems,
    processors, and so on. The API enables answers to two basic questions: "what resource is a given
    key bound to?" and "Where is a given potential link target used within a given set of DITA
    documents?".</shortdesc>
  <body>
    <p>For DITA, link management iinvolves the following:<ul
        id="ul_7118ee9f-7926-429c-8cbe-66484aec0da2">
        <li>For a given root map, determining the tree of directly-addressed local-scope maps (the
          map tree), from which the root map's effective key space is determined.</li>
        <li>Determining the key space (set of unique effective keys) defined by a given map
          tree.</li>
        <li>Determining the set of all local-scope dependencies ultimately used within the scope of
          a root map, meaning all the submaps and all the topics addressed from the maps in the map
          tree, as well as any other topics or local-scope non-DITA resources used by topics
          directly addressed from the maps in the map tree (including any graphics or objects used
          via DITA <xmlelem>image</xmlelem> or <xmlelem>object</xmlelem> elements).</li>
        <li>For each potential link target in a given set of DITA documents, determining what links
          exist to those targets (answering the "where used?" question).</li>
      </ul></p>
    <p>DITA link management is complicated by the use of applicability (the @props attribute and its
      specializations), which can determine, at processing or access time, both which definition for
      a given key is effective and whether or not a given link target is applicable ("filtered in")
      or inapplicable ("filtered out"). </p>
    <p>This means, in particular, that it is not sufficient, in the general case, to build a static
      key space consisting of only those keys that are applicable at the time the key space is
      constructed (that this, filtered in based on some ditaval specification provided as input to
      the key space construction). Rather, a general-purpose DITA link management system must
      maintain all key definitions that are <i>potentially</i> effective because they are the first
      definition of a given key name with a unique set of applicability values.</p>
    <p>For example, in an editing context, a user may want to see either all potentially effective
      key definitions or may want to dynamically set the applicability conditions in the editor and
      see the resolution results change as different key definitions become effective. This can only
      be done if the link management service maintains knowledge of all key definitions for a given
      key name (or at least all key definitions with unique applicability conditions that are the
      first such definition in the map tree).</p>
    <p>For this reason, the API provides a general key access options class that holds options that
      control access to keys and their associated resources, in particular, holding as set of active
      DITA conditions used to select effective key definitions. Most methods that access or use keys
      in some way require a KeyAccessOptions instance. </p>
    <p>In addition, for debugging purposes, it may be useful to see all key definitions, effective
      and ineffective. Thus, the link management system should maintain knowledge of all key
      definitions within a given key space so that they can be interrogated and reported.</p>
    <p>The DITA Link Management Service also provides the service of resolving keys to resources of
      course. This service necessarily includes the service of resolving DITA-specific URIs (that
      is, URIs that include DITA-defined fragment identifiers for DITA elements), as keys may be
      bound to URI-addressed resources).</p>
    <p>Where-used services are essentially indexes keyed by the address of potential link targets of
      the places those targets are used. Abstractly, you resolve all local-scope links within a
      given DITA document set, creating the index of target to links as you go. In practice, there
      are ways to avoid having to literally resolve all references. In general, only a fraction of
      the set of potential link targets will ever be queried on with where-used queries. </p>
    <p>Because DITA defines just two ways to address DITA elements, it is possible to find all the
      direct references to a given element using a fairly simply query on <xmlatt>href</xmlatt>
      attributes, which gives you the list of direct references, leaving only the question of what
      key-based references ultimately address the target. That lookup requires working backwards
      through the set of effective key references, which is a service the link management service
      can provide as it maintains knowledge of all key definitions. Thus, for a given potential
      target element, it should always be possible to determine where it is used on demand. Of
      course, the speed with which the initial direct-reference query can be answered is a function
      of how the documents to be queried are stored and managed. A XML-aware repository will be much
      speedier than doing the same query on documents management on a file system.   </p>
  </body>
</topic>
